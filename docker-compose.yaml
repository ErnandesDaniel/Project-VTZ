services:
#  postgres:
#    container_name: vtz-db-postgres
#    image: postgres
#    environment:
#      POSTGRES_PASSWORD: ${DB_PASSWORD}
#      POSTGRES_USER: ${DB_USERNAME}
#      PG_DATA: /var/lib/postgresql/data
#    ports:
#      - ${DB_PORT}:5432
#    volumes:
#      - ./pgdata/data:/var/lib/postgresql/data
#    networks:
#      - vtz-network


#  pgadmin:
#    container_name: vtz-db-pgadmin
#    image: dpage/pgadmin4
#    volumes:
#      - ./pgdata/pgadmin:/root/.pgadmin
#    env_file:
#      - .env
#    hostname: pgadmin
#    ports:
#      - ${PG_ADMIN_PORT}:80
#    logging:
#      driver: none
#    networks:
#      - vtz-network

  vtz_back:
    build:
      context: ./back
      dockerfile: ./Dockerfile
      args:
        BUILD_CONFIGURATION: Release
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development # Установите необходимое окружение
    volumes:
      - ./logs:/app/logs # Пример монтирования локальной папки
    networks:
      - vtz-network
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: vtz-db-postgres
    image: postgres
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata/data:/var/lib/postgresql/data
    networks:
      - vtz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5










#  front:
#    build: ./front
#    container_name: front
#    ports:
#      - ${FRONT_APP_PORT}:3000
#    networks:
#      - vtz-network

networks:
  vtz-network:
    driver: bridge
