// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VTZProject.Backend.BD;

#nullable disable

namespace VTZProject.Backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VTZProject.Backend.Models.Admins", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Gateways", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Gateways");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Groups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.GroupsOfMatching", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("GroupsOfMatching");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Operations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfOperation")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Practice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PracticeFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PracticeShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Practices");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.PracticeToTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PracticeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PracticeId");

                    b.HasIndex("TaskId");

                    b.ToTable("PracticeToTasks");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SectionShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SectionTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SectionTypeId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.SectionToTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("TaskId");

                    b.ToTable("SectionsToTask");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.SectionsType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SectionTypeFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SectionTypeShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SectionsTypes");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GatewayId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PredecessorTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SuccessorTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GatewayId");

                    b.HasIndex("PredecessorTaskId");

                    b.HasIndex("SuccessorTaskId");

                    b.ToTable("TaskRelations");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskToGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskToGroups");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskToGroupOfMatching", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupOfMatchingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupOfMatchingId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskToGroupsOfMatching");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskVTZ", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAllSections")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOnStageAnalysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnStagePD")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnStageRD")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnStageVAB1")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresClarification")
                        .HasColumnType("boolean");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TasksVTZ");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.History", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.Operations", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Operations", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.Admins", "Admin")
                        .WithMany("Operations")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.PracticeToTask", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.Practice", "Practice")
                        .WithMany("Tasks")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTZProject.Backend.Models.TaskVTZ", "Task")
                        .WithMany("Practices")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practice");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Section", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.SectionsType", "SectionType")
                        .WithMany("Sections")
                        .HasForeignKey("SectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionType");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.SectionToTask", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.Section", "Section")
                        .WithMany("Tasks")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTZProject.Backend.Models.TaskVTZ", "Task")
                        .WithMany("Sections")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskRelation", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.Gateways", "Gateway")
                        .WithMany("TaskRelations")
                        .HasForeignKey("GatewayId");

                    b.HasOne("VTZProject.Backend.Models.TaskVTZ", "PredecessorTask")
                        .WithMany("PredecessorRelations")
                        .HasForeignKey("PredecessorTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VTZProject.Backend.Models.TaskVTZ", "SuccessorTask")
                        .WithMany("SuccessorRelations")
                        .HasForeignKey("SuccessorTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gateway");

                    b.Navigation("PredecessorTask");

                    b.Navigation("SuccessorTask");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskToGroup", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.Groups", "Group")
                        .WithMany("TaskToGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTZProject.Backend.Models.TaskVTZ", "Task")
                        .WithMany("TaskToGroups")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskToGroupOfMatching", b =>
                {
                    b.HasOne("VTZProject.Backend.Models.GroupsOfMatching", "GroupOfMatching")
                        .WithMany("TaskToGroupsOfMatching")
                        .HasForeignKey("GroupOfMatchingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VTZProject.Backend.Models.TaskVTZ", "Task")
                        .WithMany("TaskToGroupOfMatchings")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupOfMatching");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Admins", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Gateways", b =>
                {
                    b.Navigation("TaskRelations");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Groups", b =>
                {
                    b.Navigation("TaskToGroups");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.GroupsOfMatching", b =>
                {
                    b.Navigation("TaskToGroupsOfMatching");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Practice", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.Section", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.SectionsType", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("VTZProject.Backend.Models.TaskVTZ", b =>
                {
                    b.Navigation("Practices");

                    b.Navigation("PredecessorRelations");

                    b.Navigation("Sections");

                    b.Navigation("SuccessorRelations");

                    b.Navigation("TaskToGroupOfMatchings");

                    b.Navigation("TaskToGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
